<pre class='metadata'>
Title: CBOR Credential Database Format
Shortname: CCDB 
Level: 1
Status: DREAM
Repository: https://github.com/r4gus/ccdb
URL: https://r4gus.github.io/ccdb/index.html
Editor: David P. Sugar, david@thesugar.de
Abstract: This document describes a format to store secrets at rest based on the CBOR data format. It is designed as an alternative to other file formats like KDBX used with KeePass and KeePassXC.
Warning: Not Ready
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: markdown yes, css no
</pre>

Introduction {#intro}
=====================

The problem of storing secrets securely is an important part of credential management; unfortunately, most password managers and other applications managing secrets implement their own, and some times proprietary, credential database scheme.

This document proposes a new format for storing credentials at rest. The following goals are being pursued:

Extensibility: The format allows to add new capabilities to the file format over time, and third parties should be able to enrich the information embedded in the file with proprietary extensions, with tools unaware of newer extensions being able to ignore them.

Resilience: The format protects the data using state-of-the-art cryptographic algorithms to ensure the confidentiality and integrity of the protected data.

## Conventions ## {#conventions}

: Byte
:: A byte is a value in the range `[0, 255]` that can be represented with 8 bits.

: Unsigned numbers
:: Unsigned numbers are represented as `uN`, a number in the range `[0, 2^n - 1]`, e.g., `u32` is a number between 0 and 4294967295.

: Signed numbers
:: Signed numbers are represented as `iN`, a number in the range `[-2^(N - 1), 2^(n - 1) - 1]`, e.g., `i32` is a number between 2147483648 and 2147483647.

: Endianness
:: All numbers are stored in the little-endian format, e.g., the `u32` number 0x12345678 is stored as `78 56 34 12` consecutively in memory.

: Byte sequence
:: A byte sequence is denoted as `byte[N]` where `N` is the number of consecutive bytes in memory.

: UUID
:: Certain elements like ciphers and key derivation functions are encoded as Universally Unique IDentifiers [[RFC4122]] with the version 4 (random data).

: String
:: A UTF-8 string.

## CBOR Grammar ## {#cbor-grammar}

This document uses the same grammar as used by [[!RFC8152]]. The CBOR structures are described in prose.

: bool
:: A boolean value (true: major type 7, value 21; false: major type 7, value 20)

: int
:: An unsigned integer or a negative integer.

: uint
:: An unsigned integer (major type 0)

: nint
:: A negative integer (major type 1)

: bstr
:: Byte string (major type 2)

: tstr
:: Text string (major type 3)

: map
:: A CBOR map (major type 5)

: [+ FOO]
:: Indicates that the type FOO appears one or more times in an array.

Database Format {#db-format}
=====================

The CCDB data consists of a public and a confidential part. The database starts with a public header that encodes the properties of
the database, including its version, followed by a encrypted block that contains the actual, CBOR encoded, data. The integrity of the 
header as well as the confidential block is verified using message authentication codes.

<pre class='railroad'>
N: Outer Header
N: Body Length (u64)
N: AEAD Tag
N: Encrypted Body
</pre>

## Outer Header ## {#outer-header}

The outer header encodes information required to decrypt the remaining database. The overall structure of the outer header can be described as follows:

<pre class='railroad'>
N: Version
N: Header Field Length (u64)
OneOrMore:
    N: Header Field
    Choice:
        N: [=cid=]
        N: [=iv=]
        N: [=kdf=]
</pre>

The header begins with the database version ([[#header-version]]) followed by the length of the header fields in bytes, followed by one or more header fields ([[#header-fields]]).

Note: The integrity of the header is validated by the selected AEAD cipher.

### Version ### {#header-version}

The initial 8 bytes encode the CCDB version.

<figure id="version" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Name</th>
            <th>Data Type</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><dfn>sig</dfn></td>
            <td>u32</td>
            <td>
                CCDB 
            </td>
        </tr>
        <tr>
            <td><dfn>major version</dfn></td>
            <td>u16</td>
            <td>
                0x01 for CDF major version 1
            </td>
        </tr>
        <tr>
            <td><dfn>minor version</dfn></td>
            <td>u16</td>
            <td>
                Minor version number, e.g., 0 if the CDF version is 1.0
            </td>
        </tr>
    </table>
</figure>

### Header Fields ### {#header-fields}

The [[#header-version]] is followed by a CBOR map (major type 5) of the following header fields. The keys are encoded
as text strings (major type 3) whereas the value types vary. All listed header fields are mandatory
and MUST be encoded in the order listed below.

<figure id="fieldTypes" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Key</th>
            <th>Data Type</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><dfn>cid</dfn></td>
            <td>tstr</td>
            <td>
                Identifier for a cipher suite used with the given database. The cipher suite is encoded as
                a text string.

                
                The following ciphers MUST be supported:

                - **CCDB_XCHACHA20_POLY1305_ARGON2ID**: The nonce-extended version of the IETF ChaCha20 variant as authenticated cipher and Argon2id for key derivation.
                
                The following ciphers MAY be supported:

                - CCDB_AES256GCM_ARGON2ID: AES as authenticated cipher in golauis counter mode and Argon2id for key derivation.

                CCDB_XCHAChA20_POLY1305_ARGON2ID is considered the default AEAD cipher.
            </td>
        </tr>
        <tr>
            <td><dfn>iv</dfn></td>
            <td>bstr</td>
            <td>
                Initialization vector (nonce) used for encryption. The IVs size depends
                on the cipher used for encryption:
                
                - **XChaCha20-Poly1305**: 24 bytes
                - AES256GCM: 12 bytes

                Note: A new and unique IV MUST be used for every encryption. One MUST NOT use the same IV twice! This can be achieved by using a counter or by using a cryptographically secure (pseudo) random number generator (CSRNG) to generate the IV at random.
            </td>
        </tr>
        <tr>
            <td><dfn>kdf</dfn></td>
            <td>[[#kdf-map]]</td>
            <td>
                Values specific for the [[#key-derivation]]
            </td>
        </tr>
    </table>
</figure>

#### KDF Parameters #### {#kdf-map}

The KDF parameters are used to derive a secret ([[#final-keys]]). The [=$UUID=] is mandatory and
defines which algorithm should be used as key derivation function. The other parameters are optional
and depend on the selected algorithm. All parameters associated with the specified algorithm MUST be 
present for a specific algorithm, otherwise the database is malformed. The fields MUST be encoded
in the order listed below.

<figure id="kdfParameterVariantMap" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Association</th>
        </tr>
        <tr>
            <td><dfn>I</dfn></td>
            <td>uint</td>
            <td>
                Iterations, encoded within a u64.
            </td>
            <td>Argon2</td>
        </tr>
        <tr>
            <td><dfn>M</dfn></td>
            <td>uint</td>
            <td>
                Memory usage in KiB, encoded within a u64.
            </td>
            <td>Argon2</td>
        </tr>
        <tr>
            <td><dfn>P</dfn></td>
            <td>uint</td>
            <td>
                Parallelism encoded within a u32.
            </td>
            <td>Argon2</td>
        </tr>
        <tr>
            <td><dfn>S</dfn></td>
            <td>bstr</td>
            <td>
                Random salt, typically 32 bytes. 
            </td>
            <td>Argon2</td>
        </tr>
    </table>
</figure>

### Key Derivation ### {#key-derivation}

The encryption key is derived from one or more sources of key data:

- a [[#password]],
- a [[#key-file]],
- or a [[#key-provider]]

#### Password #### {#password}

A password is the most common source of key data. It is set by a user during
database creation and is also referred to as the master password. It is recommended
to use a strong password that fulfill the criteria published by reputable authorities, such as 
<a href="https://owasp.org/">OWASP</a> and <a href="https://www.nist.gov/">NIST</a>.

It is further recommended that applications supporting the creation of CCDB databases
further support the user with the creation of a secure master password, including the
suggestion of randomized passwords.

#### Key File #### {#key-file}

A key file can serve as an input either alongside a password or as an alternative to the key derivation function used for deriving a symmetric encryption key. It's recommended that applications support a range of key file formats to enhance compatibility and flexibility.

Applications SHOULD support the following key file formats:

- **Raw**: A file containing exactly 32 bytes that make up the key.
- **Hex**: A file containing exactly 64 bytes that are interpreted as a hex encoded 32 byte key.

#### Key Provider #### {#key-provider}

Key material MAY also be obtained from other sources, e.g., using the HMAC Secret Extension of CTAP2 [[fido-v2.1]]. 

#### Symmetric Key #### {#final-keys}

To generate a symmetric key, a key derivation function ([=kdf=]) is employed, which derives the key from either a password, key file or key provider. The input into this selected key derivation function is as follows, with its remaining arguments defined by [[#kdf-map]]:

<pre highlight="js">
password || keyFileContent || keyProviderContent
</pre>

It's essential to ensure that the string passed to the KDF is not empty. Therefore, an application must enforce the usage of at least one of the following sources:

- password
- key file
- key provider

The process for deriving a symmetric key for encryption is as follows:

<pre highlight="js">
symKey = KDF(password || keyFileContent || keyProviderContent)
</pre>

Note: It's important to note that the length of the symmetric key must be adjusted according to the selected cipher ([=cid=]). For example, for AES256GCM, one can utilize the default hash length of 32 bytes for the symmetric key.

##### Argon2id + Password

<pre class="example" highlight="js">
I: 2, M: 4096, P: 8, S: 0102030401020304010203040102030401020304010203040102030401020304
password: supersecret

symKey = 1800b386aff0488a7a3720e014afd4b57d27c915ead08ed68ede40c225ce4e98 = Argon2id("supersecret")
</pre>

## Body ## {#body}

Directly after the [[#outer-header]] follows the body, consisting of the body length (`u64`), a tag, and the encrypted body data.

<figure id="body" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Name</th>
            <th>Data Type</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><dfn>Body Length</dfn></td>
            <td>u64</td>
            <td>
                The length of the [=Encrypted Body Data=] in bytes.
            </td>
        </tr>
        <tr>
            <td><dfn>Body Tag</dfn></td>
            <td>byte[]</td>
            <td>
                The AEAD tag is the result of encrypting the Body Data using the AEAD cipher defined by [=cid=].
                The length N of the tag depends on the AEAD cipher used for encryption:
                - AES256GCM: `byte[16]`
            </td>
        </tr>
        <tr>
            <td><dfn>Encrypted Body Data</dfn></td>
            <td>byte[[=Body Length=]]</td>
            <td>
                The body data encrypted using the AEAD cipher defined by [=cid=] of length [=Body Length=].
            </td>
        </tr>
    </table>
</figure>

### Body Data Structure

The body data is a nested CBOR map (major type 5) consisting of [[#body-meta]], [[#body-group]], and [[#body-entry]] data items.

<figure id="rootBodyContent" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>meta (0x00)</td>
            <td>map</td>
            <td>
                Properties describing the database itself ([[#body-meta]]).
            </td>
            <td></td>
        </tr>
        <tr>
            <td><dfn>entries</dfn> (0x01)</td>
            <td>[+ [[#body-entry]]]</td>
            <td>
                All entries of this database.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>groups (0x02)</td>
            <td>[[#body-group]]</td>
            <td>
                The root of an arbitrary number of (nested) groups. Groups only hold references
                to entries within [=entries=].
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>bin (0x03)</td>
            <td>[+ [[#body-bin]] ]</td>
            <td>
                The bin is a array of elements of type [[#body-bin]] that
                represent deleted entries. This filed MAY NOT be present
                if no entries have been deleted.
            </td>
            <td>Optional</td>
        </tr>
    </table>
</figure>

#### Bin Entry #### {#body-bin}

When a [[#body-entry]] is deleted it SHOULD NOT be removed directly but instead
moved into the [=Bin=]. Moving a deleted entry in the bin allows the user
to undo a deletion. Each application MAY define a limit after which a
deleted entry is permanently removed from the database.

<figure id="binEntry" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>time (0x00)</td>
            <td>uint</td>
            <td>
                Epoch-based date/time the entry was deleted.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>entry (0x01)</td>
            <td>map</td>
            <td>
                The deleted [[#body-entry]]. The exact location where the entry was deleted from is defined by [=Groups=].
            </td>
            <td></td>
        </tr>
    </table>
</figure>

#### Meta #### {#body-meta}

<figure id="metaBodyContent" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>gen (0x00)</td>
            <td>tstr</td>
            <td>
                The name of the application that created the database.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>name (0x01)</td>
            <td>tstr</td>
            <td>
                The name of the database.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>times (0x02)</td>
            <td>[[#body-times]]</td>
            <td>
                Time stamps. This field has to be updated each time the database content is changed. 
            </td>
            <td></td>
        </tr>
    </table>
</figure>

#### Group #### {#body-group}

<figure id="groupBodyContent" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>uuid (0x00)</td>
            <td>tstr</td>
            <td>
                A unique identifier for the given group, e.g., UUIDv4 or UUIDv7 encoded as URN, e.g.:
                
                - `0e695c28-42f9-43e4-9aca-3f71cd701dc0`
            </td>
            <td></td>
        </tr>
        <tr>
            <td>name (0x01)</td>
            <td>tstr</td>
            <td>
                A human readable name for the given group.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>times (0x02)</td>
            <td>map</td>
            <td>
                Counters and time values (see [[#body-times]]).
            </td>
            <td></td>
        </tr>
        <tr>
            <td>groups (0x03)</td>
            <td>[+ [[#body-group]] ]</td>
            <td>
                An array of [[#body-group]]s.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>entries (0x04)</td>
            <td>[+ tstr]</td>
            <td>
                An array of UUID references to entries.
            </td>
            <td>Optional</td>
        </tr>
    </table>
</figure>

#### Times #### {#body-times}

<figure id="timeContent" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>creat (0x00)</td>
            <td>uint</td>
            <td>
                Epoch-based date/time the parent was created.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>mod (0x01)</td>
            <td>uint</td>
            <td>
                Epoch-based date/time the parent was modified the last time.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>exp (0x02)</td>
            <td>uint</td>
            <td>
                Epoch-based date/time the parent will expire. The meaning of this field may vary depending on the parent.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>cnt (0x03)</td>
            <td>uint</td>
            <td>
                Counter how many times the parent was used. The meaning of this field may vary depending on the parent.
            </td>
            <td>Optional</td>
        </tr>
    </table>
</figure>

#### Entry #### {#body-entry}

<figure id="entryBodyContent" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>uuid (0x00)</td>
            <td>tstr</td>
            <td>
                A unique identifier for the given entry, e.g., UUIDv4 or UUIDv7, encoded as URN, e.g.:

                - `0e695c28-42f9-43e4-9aca-3f71cd701dc0`
            </td>
            <td></td>
        </tr>
        <tr>
            <td>name (0x01)</td>
            <td>tstr</td>
            <td>
                A human readable name for the given entry.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>times (0x02)</td>
            <td>map</td>
            <td>
                Counters and time values (see [[#body-times]]).

                Note: For applications supporting passkeys, the UsageCount field might be of particular relevance
                but please be aware that counters make the synchronization between devices difficult and may lead
                to scenarios where the user locks himself out of his accounts.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>notes (0x03)</td>
            <td>tstr</td>
            <td>
                Notes related to the given entry.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td><dfn>secret</dfn> (0x04)</td>
            <td>bstr</td>
            <td>
                A secret. This can be anything, including a password. The actual meaning of this value depends on the given context.
                
                Note: The format defined within this document deliberately does NOT encrypt data twice (see security considerations; [[#double-enc]]). If you wan't to protect your secrets using a second level of encryption, you SHOULD encrypt the secret before passing it to a ccdb writer.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>key (0x05)</td>
            <td>map</td>
            <td>
                A CBOR Object Signing and Encryption (COSE) key [[!RFC8152]]. Also see Double Coordinate Curves, Octet Key Pair, and Symmetric Keys.
                
                **Double Coordinate Curve:**
                <pre class="example">
                {
                  1: 2, 
                  3: -7, 
                  -1: 1, 
                  -4: h'299ba40f6547f9a591636ba3aabcf52adedeca324d3d6e81c8302d5199de9d0d'
                }

                A4            # map(4)
                   01         # unsigned(1) # kty
                   02         # unsigned(2)   # Elliptic Curve keys w/ x- and y-coordinate pair
                   03         # unsigned(3) # alg
                   26         # negative(6)   # ECDSA w/ SHA-256
                   20         # negative(0) # crv 
                   01         # unsigned(1)   # NIST P-256 also known as secp256r1
                   23         # negative(3) # d (private key)
                   58 20      # bytes(32)
                      299BA40F6547F9A591636BA3AABCF52ADEDECA324D3D6E81C8302D5199DE9D0D
                </pre>
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>url (0x06)</td>
            <td>tstr</td>
            <td>
                A text string representing a URL.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>uname (0x07)</td>
            <td>tstr</td>
            <td>
                The user name corresponding to the given credential.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>uid (0x08)</td>
            <td>bstr</td>
            <td>
                A ID assigned to the user by the relying party.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>group (0x09)</td>
            <td>tstr</td>
            <td>
                A UUID (URN) referencing a [[#body-group]]. If not present, the given entry is implicitly
                associated to the group directly under the document root.
            </td>
            <td>Optional</td>
        </tr>
        <tr>
            <td>attach (0x0a)</td>
            <td>[+ [[#attachment]] ]</td>
            <td>
                One or more attachments associated with the given entry. This can for example be a file
                containing recovery keys.
            </td>
            <td>Optional</td>
        </tr>
    </table>
</figure>

##### Example: Password Entry

<pre class="example">
{
  0x00: "0e695c28-42f9-43e4-9aca-3f71cd701dc0", 
  0x01: "Github", 
  0x02: {0x00: 1714585008, 0x01: 1714585008}, 
  0x03: "I should probably change my password.", 
  0x04: "supersecret"
}

A500782430653639356332382D343266392D343365342D396163612D33663731
6364373031646330016647697468756202A2001A66327DB0011A66327DB00378
25492073686F756C642070726F6261626C79206368616E6765206D7920706173
73776F72642E046B7375706572736563726574
</pre>

##### Example: Passkey Entry

The given example shows a passkey entry. The passkey properties map to the `Entry` fields as follows:

- **credId** = uuid = `\x0e\x69\x5c\x28\x42\xf9\x43\xe4\x9a\xca\x3f\x71\xcd\x70\x1d\xc0`
- **rpId** = url = `github.com`
- **userId** = uid = `\xb5\xe3\x68\x34\xa0\xda\x97\xb7\x50\x35\x58\x54\x90\x93\xe0\x48\x59\x4b\xc5\x11\xe2\x5c\xc8\x51\xcc\xf7\xa6\x8c\xb0\xfa\xd3\xf8`

<pre class="example">
{
  0: "0e695c28-42f9-43e4-9aca-3f71cd701dc0", 
  1: "Github", 
  2: {0: 1714585008, 1: 1714585008}, 
  5: {
    1: 2, 
    3: -7, 
    -1: 1, 
    -4: h'299BA40F6547F9A591636BA3AABCF52ADEDECA324D3D6E81C8302D5199DE9D0D'
  }, 
  6: "github.com", 
  7: "r4gus", 
  8: h'B5E36834A0DA97B7503558549093E048594BC511E25CC851CCF7A68CB0FAD3F8'
}

A700782430653639356332382D343266392D343365342D396163612D33663731
6364373031646330016647697468756202A2001A66327DB0011A66327DB005A4
010203262001235820299BA40F6547F9A591636BA3AABCF52ADEDECA324D3D6E
81C8302D5199DE9D0D066A6769746875622E636F6D07657234677573085820B5
E36834A0DA97B7503558549093E048594BC511E25CC851CCF7A68CB0FAD3F8
</pre>


#### Attachment #### {#attachment}

<figure id="attachmentEntry" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Field</th>
            <th>Data Type</th>
            <th>Description</th>
            <th>Optional</th>
        </tr>
        <tr>
            <td>desc (0x00)</td>
            <td>tstr</td>
            <td>
                A descriptor, e.g., a file name.
            </td>
            <td></td>
        </tr>
        <tr>
            <td>att (0x01)</td>
            <td>bstr</td>
            <td>
                A binary attachment.
            </td>
            <td></td>
        </tr>
    </table>
</figure>

## Database Creation

Every application that supports the given standard should provide the flexibility to configure parameters that influence the behavior of the database. These parameters typically include the cipher, compression algorithm, and key derivation function. It's recommended that applications only propose sensible values for ciphers and key derivation functions sourced from reputable authorities, such as <a href="https://owasp.org/">OWASP</a> and <a href="https://www.nist.gov/">NIST</a>.

By allowing configuration of these parameters, applications empower users to tailor their security settings to best suit their specific needs and environments. This adaptability ensures compatibility with various security protocols and standards, fostering a robust and customizable security posture for the application.

## Serialization

During usage, the database typically exists in an intermediate form, largely contingent upon the programming language employed. 
Before persisting it to disk, the database must undergo serialization according to the following steps:

1. **Serialize Header Version**: Serialize the version of the header as specified in [[#header-version]].
2. **Header Field Length**: Allocate 4 bytes to reserve space for the length of the header fields.
3. **Generate Initialization Vector (IV)**: Create a new and unique initialization vector ([=iv=]), ensuring it is not reused.
4. Serialize the header fields, incorporating the [=iv=].
5. **Write Serialized Header Length**: Record the size of the serialized header fields within the 4 bytes reserved in the previous step.
6. **Encode the Body**: The body is encoded as specified by the guidelines outlined in the [[#body]] section.
7. **Compression (Optional)**: If the [=cmp=] header field is not set to None, compress the encoded body using the designated compression algorithm.
8. **Serialize Body Length**: Serialize the length of the body as a u64 data type.
9. **Encrypt the Body**: Utilize the cipher specified by [=cid=] to encrypt the body with the following parameters:
    - key: The symmetric key specified in [[#final-keys]].
    - Initialization Vector (IV): [=iv=]
    - Associated Data (AD): The serialized header and body length.
10. **Write Tag and Encrypted Body**: Place the resulting tag immediately after the body length, followed by the encrypted body.

## Deserialization

Before an application can use a database it has to be deserialized and decrypted
according to the following steps:

1. **Read Serialized Data**: Retrieve the serialized data from storage.
2. **Validate Version**: Read the [[#header-version]] and validate that [=sig=] equals `CCDB`.
3. **Extract Header Length**: Extract the length of the header from the serialized data.
4. **Extract Header**: Extract the header based on the header length.
5. **Validate Header**: Validate that all required header fields are present and contain sain values.
6. **Extract Body Length**: Extract the length of the body from the serialized data.
7. **Extract Tag and Encrypted Body**: Extract the tag followed by the encrypted body from the serialized data.
8. **Decrypt the Body**: Utilize the specified cipher and associated parameters to decrypt the encrypted body:
    - key: The symmetric key specified in [[#final-keys]].
    - Initialization Vector (IV): [=iv=]
    - Associated Data (AD): `Outer Header || Body Length` 
9. **Decompression (Optional)**: If compression was applied during serialization, decompress the encoded body using the designated decompression algorithm.
10. **Decode the Body**: Decode the body according to the specifications outlined in the [[#body]] section.

Thread Model {#thread-modell}
=====================

## Assumptions

<figure id="thread-assumptions" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Identifier</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><dfn>A_UNTRUSTED_STORAGE_LOCATION</dfn></td>
            <td>
                The file may be stored in a untrusted location, e.g., a unprotected USB stick or file share.
            </td>
        </tr>
        <tr>
            <td><dfn>A_TRUSTED_PROCESSING_ENVIRONMENT</dfn></td>
            <td>
                The file is only decrypted and processed in a trusted processing environment.
            </td>
        </tr>
    </table>
</figure>

## Threads

<figure id="thread-threads" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Identifier</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>T_FILE_ACCESS</td>
            <td>
                The file is accessed at rest by a untrusted person. Applicable because of [=A_UNTRUSTED_STORAGE_LOCATION=].
                Mitigated by [=M_ENCRYPTION=].
            </td>
        </tr>
        <tr>
            <td>T_FILE_MANIP</td>
            <td>
                The file is manipulated at rest by a untrusted person. Applicable because of [=A_UNTRUSTED_STORAGE_LOCATION=].
                Mitigated by [=M_INTEGRITY=].
            </td>
        </tr>
        <tr>
            <td>T_MEMORY_ACCESS</td>
            <td>
                The memory is accessed while reading or writing the database by a malicious actor. Not applicable because
                of [=A_TRUSTED_PROCESSING_ENVIRONMENT=]. A kdbxng file MUST NOT be processed on a untrusted system.
            </td>
        </tr>
        <tr>
            <td>T_MEMORY_MANIP</td>
            <td>
                The memory is manipulated while reading or writing the database by a malicious actor.  Not applicable because
                of [=A_TRUSTED_PROCESSING_ENVIRONMENT=]. A kdbxng file MUST NOT be processed on a untrusted system.
            </td>
        </tr>
    </table>
</figure>

## Mitigations

<figure id="thread-mitigations" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Identifier</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><dfn>M_ENCRYPTION</dfn></td>
            <td>
                The file is encrypted using a state-of-the-art cipher.
            </td>
        </tr>
        <tr>
            <td><dfn>M_INTEGRITY</dfn></td>
            <td>
                The integrity of the file is verified using a message authenticaiton code.
            </td>
        </tr>
    </table>
</figure>

## Policies

The following policies SHOULD be considered by applications supporting the format defined within this specification.

<figure id="policies" class="table">
    <table class="complex data longlastcol">
        <tr>
            <th>Identifier</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>P_MEM_PROTECT</td>
            <td>
                The memory of readers and writers should be handeled with care. This SHOULD include but is
                is not limited to mitigations like [mlock](https://www.man7.org/linux/man-pages/man2/mlock.2.html)
                on UNIX like systems.
            </td>
        </tr>
    </table>
</figure>

## Security Considerations ## {#security}

Files that store sensitive information are of particular interest to adversaries. The threads posed to
a encrypted database change depending on its current state, including data-at-rest, data-in-transit, and
data-in-use.

### No Compression

Compression, in combination with encryption, may lead to unwanted behavior. Using CBOR as the main data format allows
for a small message size making compression less relevant. This is why CCDB specifically doesn't use compression. 

### No Double Encryption ### {#double-enc}

Some file formats, like KDBX4, encrypt not only their main data but also specific fields such as password entries. The primary reason for this is to prevent the pollution of process memory with secrets, thereby making them more manageable. Assuming that the underlying operating system enforces process separation, including their allocated memory, and that the application protects the memory from being swapped out, the threat model involves an attacker with root privileges who can access process memory to obtain information about the decrypted data.

The problem arises when an attacker can read the decrypted XML data structure of a KDBX4 database located in main memory. In such a case, the attacker can also read the prepended StreamKey. This allows the attacker to parse the XML data structure, collect all "protected" fields, and decrypt them using the StreamCipher with the StreamKey. Consequently, the fields are merely obfuscated, and the application cannot enforce the confidentiality of the data.

We, the authors of this document, believe that no confidential data should be processed on a compromised system and that there are no sufficient protection measures against an attacker with root privileges. Therefore, we assume a trusted processing environment in our threat model. Applications aiming to protect their data with a second layer of encryption should encrypt the data themselves and then store the ciphertext in the [=secret=] field of a [[#body-entry]].

Recommended File Name Extension: .ccdb {#recommendet-extension}
=====================

The recommended file name extension for the "CBOR Credential Database Format" specified in this document is ".ccdb".

On Windows and macOS, files are distinguished by an extension to their filename. Such an extension is technically not actually required, as applications should be able to automatically detect the ccdb file format through the "magic bytes" at the beginning of the file, as some other UN*X desktop environments do. However, using name extensions makes it easier to work with files (e.g. visually distinguish file formats) so it is recommended - though not required - to use .ccdb as the name extension for files following this specification.
